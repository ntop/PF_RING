AC_INIT([pfring], 1.0)

AC_PROG_CC
AC_CONFIG_FILES(lib/Makefile)

AC_CHECK_HEADERS([linux/net_tstamp.h librdi.h])

MACHINE=`uname -m`
CFLAGS=""
SYS_LIBS=""

VER=`cat ../kernel/linux/pf_ring.h | grep RING_VERSION | head -1 | cut -d '"' -f 2`
MAJOR_VER=`cat ../kernel/linux/pf_ring.h | grep RING_VERSION | head -1 | cut -d '"' -f 2 | cut -d '.' -f 1`

dnl> Checking for supported libraries (corei7, corei7-avx, core-avx2)
NATIVE=`$CC -c -Q -march=native --help=target| grep "march" | xargs | cut -d ' ' -f 2`
if test -f "lib/libs/libpfring_zc_x86_64_$NATIVE.a"; then
  CFLAGS="-march=native -mtune=native $CFLAGS"
  LIBARCH="_$NATIVE"
fi

dnl> Redis - disabled by default
AC_ARG_ENABLE([redis], AS_HELP_STRING([--enable-redis], [Enable Redis support in PF_RING]))
if test "x$enable_redis" = xyes; then
  AC_CHECK_LIB([hiredis], [redisCommand])
  if test "x$ac_cv_lib_hiredis_redisCommand" = xyes; then
    AS_IF([test "x$enable_redis" = "xyes"], [REDIS_LIB="-lhiredis"; HAVE_REDIS="-D HAVE_REDIS"])
  fi
fi

dnl> ZMQ - disabled by default
AC_ARG_ENABLE([zmq], AS_HELP_STRING([--enable-zmq], [Enable ZMQ support in PF_RING]))
if test "x$enable_zmq" = xyes; then 
  AC_CHECK_LIB([zmq], [zmq_msg_send])
  if test "x$ac_cv_lib_zmq_zmq_msg_send" = xyes; then
    AS_IF([test "x$enable_zmq" = "xyes"], [ZMQ_LIB="-lzmq"; HAVE_ZMQ="-D HAVE_ZMQ"])
  fi
fi

AC_CHECK_LIB( [rt], [clock_gettime],   [SYSLIBS="$SYSLIBS -lrt"])
AC_CHECK_LIB( [nl], [nl_handle_alloc], [SYSLIBS="$SYSLIBS -lnl"])
AC_CHECK_LIB( [dl], [dlopen, dlsym],   [SYSLIBS="$SYSLIBS -ldl"],
		   [AC_CHECK_LIB([c], [dlopen, dlsym], [SYSLIBS="$SYSLIBS -lc"],
		   [AC_MSG_ERROR([unable to find the dlopen(), dlsym() functions]) ]) ])
AC_CHECK_LIB(nl-3, nl_socket_alloc,    [SYSLIBS="$SYSLIBS -lnl-genl-3 -lnl-3"]) #libnl-3.0

AR_X=

if test $MACHINE = "x86_64"; then

AR_X="ar x"

dnl> Check for a modern pthread library
AC_CHECK_LIB(pthread, pthread_setaffinity_np, AC_DEFINE_UNQUOTED(HAVE_PTHREAD_SETAFFINITY_NP, 1, [libc has pthread_setaffinity_np]))

if test "x$ac_cv_lib_pthread_pthread_setaffinity_np" = xyes; then

AC_MSG_CHECKING([PF_RING ZC support])
PF_RING_ZC_LIB="libs/libpfring_zc_$MACHINE$LIBARCH.a"
if test -f lib/$PF_RING_ZC_LIB; then
  HAVE_PF_RING_ZC="-D HAVE_PF_RING_ZC"
  PF_RING_ZC_OBJS=`ar t lib/$PF_RING_ZC_LIB | grep -F .o | tr '\n' ' '`
  PF_RING_ZC_DEP="extract_pfring_zc_lib"
  PF_RING_ZC_H="pfring_zc.h"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([PF_RING FT support])
PF_RING_FT_LIB="libs/libpfring_ft_$MACHINE$LIBARCH.a"
if test -f lib/$PF_RING_FT_LIB; then
  HAVE_PF_RING_FT="-D HAVE_PF_RING_FT"
  PF_RING_FT_OBJS=`ar t lib/$PF_RING_FT_LIB | grep -F .o | tr '\n' ' '`
  PF_RING_FT_DEP="extract_pfring_ft_lib"
  PF_RING_FT_H="pfring_ft.h"
  AC_MSG_RESULT(yes)

  AC_MSG_CHECKING([hyperscan.io presence])
  if test -f /usr/local/lib/libhs.a; then     
    AC_DEFINE_UNQUOTED(HAVE_HYPERSCAN, 1, [hyperscan.io support is enabled])
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING([PF_RING NPCAP support])
NPCAP_LIB="libs/libnpcap_$MACHINE$LIBARCH.a"
if test -f lib/$NPCAP_LIB; then
  HAVE_NPCAP="-D HAVE_NPCAP"
  NPCAP_OBJS=`ar t lib/$NPCAP_LIB | grep -F .o | tr '\n' ' '`
  NPCAP_DEP="extract_npcap_lib"
  NPCAP_H="npcap.h"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl> R/W locks are broken on some BSD releases
if test "$IS_FREEBSD" != "1"; then
  AC_MSG_CHECKING([if r/w locks are supported])
  AC_TRY_RUN([
  #include <pthread.h>
  int main()
  {
    pthread_rwlock_t t;
    return 0;
  }
  ]
  , [ AC_MSG_RESULT(yes) AC_DEFINE_UNQUOTED(HAVE_RW_LOCK, 1, [pthread has rw locks]) ], [AC_MSG_RESULT(no)]
  )
fi

dnl> end of pthread_setaffinity_np check
fi

dnl> Accolade
MOD_ACCOLADE_LIB="libs/libpfring_accolade_$MACHINE$LIBARCH.a"
HAVE_ACCOLADE="-D HAVE_ACCOLADE"
ACCOLADE_OBJS=`ar t lib/$MOD_ACCOLADE_LIB | grep .o\$ | tr '\n' ' '`
ACCOLADE_DEP="extract_accolade_lib"

dnl> DAG
MOD_DAG_LIB="libs/libpfring_dag_$MACHINE$LIBARCH.a"
DAG_LIB="-lm -ldl" 
HAVE_DAG="-D HAVE_DAG"
DAG_OBJS=`ar t lib/$MOD_DAG_LIB | grep .o\$ | tr '\n' ' '`
DAG_DEP="extract_dag_lib"

dnl> Exablaze
dnl> HAVE_EXABLAZE="-D HAVE_EXABLAZE"
dnl> EXABLAZE_OBJS=`ar t lib/$MOD_EXABLAZE_LIB | grep .o\$ | tr '\n' ' '`
dnl> EXABLAZE_DEP="extract_exablaze_lib"
dnl> EXABLAZE_LIB="-lexanic"

dnl> Fiberblaze
MOD_FIBERBLAZE_LIB="libs/libpfring_fiberblaze_$MACHINE$LIBARCH.a"
FIBERBLAZE_LIB="-lm -ldl" 
HAVE_FIBERBLAZE="-D HAVE_FIBERBLAZE"
FIBERBLAZE_OBJS=`ar t lib/$MOD_FIBERBLAZE_LIB | grep .o\$ | tr '\n' ' '`
FIBERBLAZE_DEP="extract_fiberblaze_lib"

dnl> Myricom
MOD_MYRICOM_LIB="libs/libpfring_myricom_$MACHINE$LIBARCH.a"
HAVE_MYRICOM="-D HAVE_MYRICOM"
MYRICOM_OBJS=`ar t lib/$MOD_MYRICOM_LIB | grep .o\$ | tr '\n' ' '`
MYRICOM_DEP="extract_myricom_lib"

dnl> Napatech
MOD_NT_LIB="libs/libpfring_nt_$MACHINE$LIBARCH.a"
HAVE_NT="-D HAVE_NT"
NT_OBJS=`ar t lib/$MOD_NT_LIB | grep .o\$ | tr '\n' ' '`
NT_DEP="extract_nt_lib"

dnl> Netcope
MOD_NETCOPE_LIB="libs/libpfring_netcope_$MACHINE.a" #MOD_NETCOPE_LIB="libs/libpfring_netcope_$MACHINE$LIBARCH.a"
HAVE_NETCOPE="-D HAVE_NETCOPE"
NETCOPE_OBJS=`ar t lib/$MOD_NETCOPE_LIB | grep .o\$ | tr '\n' ' '`
NETCOPE_DEP="extract_netcope_lib"

dnl> end of x86_64 check
fi

dnl> BPF - Default enabled
AC_ARG_ENABLE([bpf], AS_HELP_STRING([--disable-bpf], [Disable BPF support in PF_RING]))
AS_IF([test "x$enable_bpf" != "xno"], [HAVE_BPF="-D ENABLE_BPF"; BPF_INCLUDE="-I../libpcap"; BPF_LIB="-L../libpcap -lpcap"])

AC_CHECK_LIB([ndpi], [ndpi_get_api_version], [LDFLAGS="${LDFLAGS} -lndpi"])
if test "x$ac_cv_lib_ndpi_ndpi_get_api_version" = xyes; then
  NDPI_LIB=`pkg-config --libs libndpi`
  NDPI_INC=`pkg-config --cflags libndpi | sed -e 's/\(-I[^ \t]*\)/\1\/libndpi/g'`
  HAVE_NDPI="-D HAVE_NDPI"
else
  AC_MSG_WARN([nDPI is required for L7 protocol detection with PF_RING FT, please install it from http://github.com/ntop/nDPI])
  AC_MSG_CHECKING([nDPI support for nBPF - static linking])
  NDPI_HOME="../../nDPI"
  if test -f "$NDPI_HOME/src/lib/.libs/libndpi.a"; then
    NDPI_LIB="../$NDPI_HOME/src/lib/.libs/libndpi.a"
    NDPI_INC="-I../$NDPI_HOME/src/include"
    HAVE_NDPI="-D HAVE_NDPI"
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
fi

if test "x$ac_cv_header_linux_net_tstamp_h" = x""yes; then :
  HAVE_HW_TIMESTAMP="-D ENABLE_HW_TIMESTAMP"
fi

AC_SUBST(CC)
AC_SUBST(CFLAGS)

AC_SUBST(MAJOR_VER)
AC_SUBST(VER)

AC_SUBST(HAVE_PF_RING_ZC)
AC_SUBST(PF_RING_ZC_LIB)
AC_SUBST(PF_RING_ZC_OBJS)
AC_SUBST(PF_RING_ZC_DEP)
AC_SUBST(PF_RING_ZC_H)

AC_SUBST(HAVE_PF_RING_FT)
AC_SUBST(PF_RING_FT_LIB)
AC_SUBST(PF_RING_FT_OBJS)
AC_SUBST(PF_RING_FT_DEP)
AC_SUBST(PF_RING_FT_H)

AC_SUBST(HAVE_NPCAP)
AC_SUBST(NPCAP_LIB)
AC_SUBST(NPCAP_OBJS)
AC_SUBST(NPCAP_DEP)
AC_SUBST(NPCAP_H)

AC_SUBST(HAVE_ACCOLADE)
AC_SUBST(ACCOLADE_OBJS)
AC_SUBST(ACCOLADE_DEP)
AC_SUBST(MOD_ACCOLADE_LIB)

AC_SUBST(HAVE_DAG)
AC_SUBST(DAG_OBJS)
AC_SUBST(DAG_LIB)
AC_SUBST(DAG_DEP)
AC_SUBST(MOD_DAG_LIB)

AC_SUBST(EXABLAZE_LIB)
AC_SUBST(EXABLAZE_OBJS)
AC_SUBST(EXABLAZE_DEP)
AC_SUBST(HAVE_EXABLAZE)

AC_SUBST(HAVE_FIBERBLAZE)
AC_SUBST(FIBERBLAZE_OBJS)
AC_SUBST(FIBERBLAZE_LIB)
AC_SUBST(FIBERBLAZE_DEP)
AC_SUBST(MOD_FIBERBLAZE_LIB)

AC_SUBST(MYRICOM_OBJS)
AC_SUBST(HAVE_MYRICOM)
AC_SUBST(MOD_MYRICOM_LIB)
AC_SUBST(MYRICOM_DEP)

AC_SUBST(HAVE_NT)
AC_SUBST(NT_OBJS)
AC_SUBST(NT_DEP)
AC_SUBST(MOD_NT_LIB)

AC_SUBST(HAVE_NETCOPE)
AC_SUBST(NETCOPE_OBJS)
AC_SUBST(NETCOPE_DEP)
AC_SUBST(MOD_NETCOPE_LIB)

AC_SUBST(HAVE_BPF)
AC_SUBST(BPF_INCLUDE)

AC_SUBST(NDPI_LIB)
AC_SUBST(NDPI_INC)
AC_SUBST(HAVE_NDPI)

AC_SUBST(HAVE_REDIS)
AC_SUBST(REDIS_LIB)

AC_SUBST(HAVE_ZMQ)
AC_SUBST(ZMQ_LIB)
AC_SUBST(HAVE_HYPERSCAN)
AC_SUBST(SYSLIBS)
AC_SUBST(HAVE_HW_TIMESTAMP)
AC_SUBST(AR_X)

dnl> AC_CONFIG_FILES([lib/Makefile])
AC_CONFIG_FILES([lib/pfring_config])
AC_CONFIG_FILES([examples/Makefile])
AC_CONFIG_FILES([examples_zc/Makefile])
AC_CONFIG_FILES([examples_ft/Makefile])
AC_CONFIG_FILES([c++/Makefile])
AC_CONFIG_FILES([nbpf/Makefile])
AC_CONFIG_FILES([wireshark/extcap/Makefile])

AC_CONFIG_HEADERS(lib/config.h)
AC_OUTPUT

dnl> Make sure pfring_config is executable
chmod gou+x lib/pfring_config
